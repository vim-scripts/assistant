abs=>({expr}) 浮点或数值 {expr} 的绝对值
add=>({list}, {item}) 列表 在 |List| {list} 最后附加 {item}
append=>({lnum}, {string}) 数值 在第 {lnum} 行下附加字符串 {string}
append=>({lnum}, {list}) 数值 在第 {lnum} 行下附加行 {list}
argc=>() 数值 参数列表的文件数目
argidx=>() 数值 参数列表的当前索引
argv=>({nr}) 字符串 参数列表第 {nr} 个参数
argv=>() 列表 参数列表
atan=>({expr}) 浮点 {expr} 的反正切值
browse=>({save}, {title}, {initdir}, {default}) 字符串 启动文件请求窗口
browsedir=>({title}, {initdir}) 字符串 启动目录请求窗口
bufexists=>({expr}) 数值 如果缓冲区 {expr} 存在则为真
buflisted=>({expr}) 数值 如果缓冲区 {expr} 在列表内则为真
bufloaded=>({expr}) 数值 如果缓冲区 {expr} 被载入则为真
bufname=>({expr}) 字符串 缓冲区 {expr} 的名字
bufnr=>({expr}) 数值 缓冲区 {expr} 的数目
bufwinnr=>({expr}) 数值 缓冲区 {expr} 的窗口号
byte2line=>({byte}) 数值 第 {byte} 个字节所在的行号
byteidx=>({expr}, {nr}) 数值 {expr} 里第 {nr} 个字符的字节位置
call=>({func}, {arglist} [, {dict}]) 可变 调用函数 {func}，使用参数 {arglist}
ceil=>({expr}) 浮点 {expr} 向上取整
changenr=>() 数值 当前改变号
char2nr=>({expr}) 数值 {expr} 里第一个字符串的 ASCII 值
cindent=>({lnum}) 数值 第 {lnum} 行的 C 缩进
clearmatches=>() 无 清除所有的匹配
col=>({expr}) 数值 光标或位置标记的列号
complete=>({startcol}, {matches}) 字符串 设置插入模式补全
complete_add=>({expr}) 数值 增加补全匹配
complete_check=>() 数值 补全时检查输入的键
confirm=>({msg} [, {choices} [, {default} [, {type}]]]) 数值 用户选择的序号
copy=>({expr}) 可变 提供 {expr} 的浅备份
cos=>({expr}) 浮点 {expr} 的余弦值
count=>({list}, {expr} [, {start} [, {ic}]]) 数值 计算 {list} 里有多少个 {expr}
cscope_connection=>([{num} , {dbpath} [, {prepend}]]) 数值 检查 cscope 连接是否存在
cursor=>({lnum}, {col} [, {coladd}]) 数值 移动光标到 {lnum}，{col}，{coladd}
cursor=>({list}) 数值 移动光标到 {list} 里的位置
deepcopy=>({expr}) 可变 提供 {expr} 的完整备份
delete=>({fname}) 数值 删除文件 {fname}
did_filetype=>() 数值 如果使用过 FileType 自动命令事件则为真
diff_filler=>({lnum}) 数值 {lnum} 行之上的 diff 填充行数
diff_hlID=>({lnum}, {col}) 数值 {lnum}/{col} 位置的 diff 高亮
empty=>({expr}) 数值 如果 {expr} 为空则为真
escape=>({string}, {chars}) 字符串 在 {string} 里用 '\' 转义 {chars}
eval=>({string}) 可变 计算 {string}，返回结果
eventhandler=>() 数值 如果在事件处理中则为真
executable=>({expr}) 数值 如果可执行文件 {expr} 存在则为 1
exists=>({expr}) 数值 如果 {expr} 存在则为真
extend=>({expr1}, {expr2} [, {expr3}]) 列表/字典 把 {expr2} 里的项目插入 {expr1}
expand=>({expr}) 字符串 扩展 {expr} 里的特殊关键字
feedkeys=>({string} [, {mode}]) 数值 给预输入缓冲区加入键序列
filereadable=>({file}) 数值 如果 {file} 是个可读文件则为真
filewritable=>({file}) 数值 如果 {file} 是个可写文件则为真
filter=>({expr}, {string}) 列表/字典 删除 {expr} 里 {string} 为 0 的项目
finddir=>({name}[, {path}[, {count}]]) 字符串 在 {path} 里寻找目录 {name}
findfile=>({name}[, {path}[, {count}]]) 字符串 在 {path} 里寻找文件 {name}
float2nr=>({expr}) 数值 转换浮点数 {expr} 为数值
floor=>({expr}) 浮点 {expr} 向下取整
fnameescape=>({fname}) 字符串 转义 {fname} 中的特殊字符
fnamemodify=>({fname}, {mods}) 字符串 修改文件名
foldclosed=>({lnum}) 数值 {lnum} 所在折叠的首行，如果是关闭的话
foldclosedend=>({lnum}) 数值 {lnum} 所在折叠的末行，如果是关闭的话
foldlevel=>({lnum}) 数值 {lnum} 的折叠级别
foldtext=>() 字符串 关闭的折叠显示的行
foldtextresult=>({lnum}) 字符串 {lnum} 所在的关闭的折叠的文本
foreground=>() 数值 把 Vim 窗口带到前台
function=>({name}) 函数引用 函数 {name} 的引用
garbagecollect=>([at_exit]) 无 释放内存，打破循环引用
get=>({list}, {idx} [, {def}]) 可变 得到 {list} 或 {def} 的项目 {idx}
get=>({dict}, {key} [, {def}]) 可变 得到 {dict} 或 {def} 的项目 {idx}
getbufline=>({expr}, {lnum} [, {end}]) 列表 缓冲区 {expr} 第 {lnum} 到 {end} 行
getbufvar=>({expr}, {varname}) 可变 缓冲区 {expr} 的变量 {varname}
getchar=>([expr]) 数值 让用户输入一个字符
getcharmod=>() 数值 最近输入字符的修饰符
getcmdline=>() 字符串 返回当前命令行
getcmdpos=>() 数值 返回命令行的光标位置
getcmdtype=>() 字符串 返回当前命令行类型
getcwd=>() 字符串 当前工作目录
getfperm=>({fname}) 字符串 文件 {fname} 的文件权限
getfsize=>({fname}) 数值 字节计算的文件 {fname} 大小
getfontname=>([{name}]) 字符串 使用的字体名
getftime=>({fname}) 数值 文件的最新修改时间
getftype=>({fname}) 字符串 文件 {fname} 类型的描述
getline=>({lnum}) 字符串 当前缓冲区的第 {lnum} 行
getline=>({lnum}, {end}) 列表 当前缓冲区第 {lnum} 到 {end} 行
getloclist=>({nr}) 列表 位置列表项目的列表
getmatches=>() 列表 当前匹配的列表
getpid=>() 数值 Vim 的进程号
getpos=>({expr}) 列表 光标、位置标记等的位置
getqflist=>() 列表 quickfix 项目的列表
getreg=>([{regname} [, 1]]) 字符串 寄存器内容
getregtype=>([{regname}]) 字符串 寄存器类型
gettabwinvar=>({tabnr}, {winnr}, {name}) 可变 {tabnr} 标签页 {winnr} 窗口的 {name}
getwinposx=>() 数值 GUI Vim 窗口以像素计的 X 坐标
getwinposy=>() 数值 GUI Vim 窗口以像素计的 Y 坐标
getwinvar=>({nr}, {varname}) 可变 窗口 {expr} 的变量 {varname}
glob=>({expr}) 字符串 扩展 {expr} 里的文件通配符
globpath=>({path}, {expr}) 字符串 在 {path} 所有目录下执行 glob({expr})
has=>({feature}) 数值 如果支持特性 {feature} 则为真
has_key=>({dict}, {key}) 数值 如果 {dict} 有项目 {key} 则为真
haslocaldir=>() 数值 如果当前窗口执行过 |:lcd|
hasmapto=>({what} [, {mode} [, {abbr}]]) 数值 如果 {what} 的映射存在则为真
histadd=>({history},{item}) 字符串 在历史里增加项目
histdel=>({history} [, {item}]) 字符串 从历史里删除项目
histget=>({history} [, {index}]) 字符串 得到历史的第 {index} 项
histnr=>({history}) 数值 历史里最高的项目号
hlexists=>({name}) 数值 如果高亮组 {name} 存在则为真
hlID=>({name}) 数值 高亮组 {name} 的语法 ID
hostname=>() 字符串 Vim 运行的机器名字
iconv=>({expr}, {from}, {to}) 字符串 转换 {expr} 的编码
indent=>({lnum}) 数值 第 {lnum} 行的缩进
index=>({list}, {expr} [, {start} [, {ic}]]) 数值 {list} 列表里出现 {expr} 的项目的索引
input=>({prompt} [, {text} [, {completion}]]) 字符串 从用户得到输入
inputdialog=>({p} [, {t} [, {c}]]) 字符串 类似于 input()，但使用 GUI 对话框
inputlist=>({textlist}) 数值 让用户从选择列表里挑选
inputrestore=>() 数值 恢复预输入
inputsave=>() 数值 保存和清除预输入
inputsecret=>({prompt} [, {text}]) 字符串 类似于 input()，但隐藏文本
insert=>({list}, {item} [, {idx}]) 列表 在 {list} 里插入 {item} [{idx} 之前]
isdirectory=>({directory}) 数值 如果 {directory} 是目录则为真
islocked=>({expr}) 数值 如果 {expr} 被锁住则为真
items=>({dict}) 列表 {dict} 里的键-值组对
join=>({list} [, {sep}]) 字符串 连接 {list} 的项目成为一个字符串
keys=>({dict}) 列表 {dict} 的所有键
len=>({expr}) 数值 {expr} 的长度
libcall=>({lib}, {func}, {arg}) 字符串 调用库 {lib} 的函数 {func}，使用参数
 {arg}
libcallnr=>({lib}, {func}, {arg}) 数值 同上，但返回数值
line=>({expr}) 数值 光标所在、末行或者位置标记所在的行号
line2byte=>({lnum}) 数值 行 {lnum} 的字节位置
lispindent=>({lnum}) 数值 行 {lnum} 的 Lisp 缩进
localtime=>() 数值 当前时间
log10=>({expr}) 浮点 {expr} 以 10 为底的对数
map=>({expr}, {string}) 列表/字典 {expr} 的每个项目改变为 {string}
maparg=>({name}[, {mode} [, {abbr}]]) 字符串 模式 {mode} 的映射 {name} 的右边
mapcheck=>({name}[, {mode} [, {abbr}]]) 字符串 检查匹配 {name} 的映射
match=>({expr}, {pat}[, {start}[, {count}]]) 数值 {expr} 里 {pat} 的匹配位置
matchadd=>({group}, {pattern}[, {priority}[, {id}]]) 数值 用 {group} 高亮 {pattern}
matcharg=>({nr}) 列表 |:match| 的参数
matchdelete=>({id}) 数值 删除 {id} 指定的匹配
matchend=>({expr}, {pat}[, {start}]) 数值 {expr} 里 {pat} 的结束位置
matchlist=>({expr}, {pat}[, {start}[, {count}]]) 列表 {expr} 里 {pat} 的匹配和子匹配
matchstr=>({expr}, {pat}[, {start}[, {count}]]) 字符串 第 {count} 个 {expr} 里 {pat} 的匹配文 本
max=>({list}) 数值 {list} 的项目的最大值
min=>({list}) 数值 {list} 的项目的最小值
mkdir=>({name} [, {path} [, {prot}]]) 数值 建立目录 {name}
mode=>([expr]) 字符串 当前编辑模式
nextnonblank=>({lnum}) 数值 第一个大于等于 {lnum} 的非空白行的行号
nr2char=>({expr}) 字符串 ASCII 值为 {expr} 的单个字符
pathshorten=>({expr}) 字符串 缩短路径里的目录名
pow=>({x}, {y}) 浮点 {x} 的 {y} 次方
prevnonblank=>({lnum}) 数值 最后一个小于等于 {lnum} 的非空白行的行号
printf=>({fmt}, {expr1}...) 字符串 排版文本
pumvisible=>() 数值 弹出窗口是否可见
range=>({expr} [, {max} [, {stride}]]) 列表 从 {expr} 到 {max} 的序列
readfile=>({fname} [, {binary} [, {max}]]) 列表 得到文件 {fname} 的行列表
reltime=>([{start} [, {end}]]) 列表 得到时间值
reltimestr=>({time}) 字符串 把时间值转化为字符串
remote_expr=>({server}, {string} [, {idvar}]) 字符串 发送表达式
remote_foreground=>({server}) 数值 把 Vim 服务器带到前台
remote_peek=>({serverid} [, {retvar}]) 数值 检查应答字符串
remote_read=>({serverid}) 字符串 读入应答字符串
remote_send=>({server}, {string} [, {idvar}]) 字符串 发送键序列
remove=>({list}, {idx} [, {end}]) 可变 从 {list} 里删除项目 {idx}-{end}
remove=>({dict}, {key}) 可变 从 {dict} 里删除项目 {key}
rename=>({from}, {to}) 数值 换名 (移动) 文件，从 {from} 到 {to}
repeat=>({expr}, {count}) 字符串 重复 {expr} {count} 次
resolve=>({filename}) 字符串 解析快捷方式对应的文件名
reverse=>({list}) 列表 反转 {list}，直接修改 {list}
round=>({expr}) 浮点 {expr} 四舍五入
search=>({pattern} [, {flags} [, {stopline} [, {timeout}]]]) 数值 搜索 {pattern}
searchdecl=>({name} [, {global} [, {thisblock}]]) 数值 搜索变量声明
searchpair=>({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) 数值 搜索 start/end 对的另一侧
searchpairpos=>({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) 列表 搜索 start/end 队的另一侧
searchpos=>({pattern} [, {flags} [, {stopline} [, {timeout}]]]) 列表 搜索 {pattern}
server2client=>({clientid}, {string}) 数值 发送应答字符串
serverlist=>() 字符串 得到可用的服务器列表
setbufvar=>({expr}, {varname}, {val}) 设置缓冲区 {expr} 的 {varname} 为 {val}
setcmdpos=>({pos}) 数值 设置命令行的光标位置
setline=>({lnum}, {line}) 数值 设置第 {lnum} 行的内容为 {line}
setloclist=>({nr}, {list}[, {action}]) 数值 用 {list} 修改位置列表
setmatches=>({list}) 数值 还原匹配列表
setpos=>({expr}, {list}) 无 设置 {expr} 的位置为 {list}
setqflist=>({list}[, {action}]) 数值 用 {list} 修改 quickfix 列表
setreg=>({n}, {v}[, {opt}]) 数值 设置寄存器的值和类型
settabwinvar=>({tabnr}, {winnr}, {varname}, {val}) 无 设置标签页 {tabnr} 窗口 {winnr} 的 {varname} 变量为 {val}
setwinvar=>({nr}, {varname}, {val}) 设置窗口 {expr} 的 {varname} 为 {val}
shellescape=>({string} [, {special}]) 字符串 转义 {string} 以便用作外壳命令的参数
simplify=>({filename}) 字符串 尽可能简化文件名
sin=>({expr}) 浮点 {expr} 的正弦值
sort=>({list} [, {func}]) 列表 排序 {list}，用比较函数 {func}
soundfold=>({word}) 字符串 按发音折叠 {word}
spellbadword=>() 字符串 光标所在的拼写错误的单词
spellsuggest=>({word} [, {max} [, {capital}]]) 列表 拼写建议
split=>({expr} [, {pat} [, {keepempty}]]) 列表 从 {pat} 分割的 {expr} 里构造 |List|
sqrt=>({expr} 浮点 {expr} 的平方根
str2float=>({expr}) 浮点 转换字符串为浮点数
str2nr=>({expr} [, {base}]) 数值 把字符串转换为数值
strftime=>({format}[, {time}]) 字符串 指定格式的时间
stridx=>({haystack}, {needle}[, {start}]) 数值 {haystack} 里 {needle} 的位置
string=>({expr}) 字符串 {expr} 值得字符串表示
strlen=>({expr}) 数值 字符串 {expr} 的长度
strpart=>({src}, {start}[, {len}]) 字符串 {src} 从 {start} 开始的 {len} 个字节
strridx=>({haystack}, {needle} [, {start}]) 数值 {haystack} 里最后一个 {needle} 的位置
strtrans=>({expr}) 字符串 翻译字符串，使之可以显示
submatch=>({nr}) 字符串 ":substitute" 的特定匹配
substitute=>({expr}, {pat}, {sub}, {flags}) 字符串 {expr} 里的所有 {pat} 被 {sub} 替代
synID=>({lnum}, {col}, {trans}) 数值 {lnum} 行 {col} 列所在的语法 ID
synIDattr=>({synID}, {what} [, {mode}]) 字符串 syntax ID {synID} 的 {what} 属性
synIDtrans=>({synID}) 数值 {synID} 经过翻译的语法 ID
synstack=>({lnum}, {col}) 列表 {lnum}行 {col} 列所在的语法 ID 堆栈
system=>({expr} [, {input}]) 字符串 外壳命令/过滤 {expr} 的输出
tabpagebuflist=>([{arg}]) 列表 标签页里的缓冲区号列表
tabpagenr=>([{arg}]) 数值 当前或最后标签页的编号
tabpagewinnr=>({tabarg}[, {arg}]) 数值 标签页里当前窗口的编号
taglist=>({expr}) 列表 匹配 {expr} 的标签列表
tagfiles=>() 列表 使用的标签文件
tempname=>() 字符串 临时文件的文件名
tolower=>({expr}) 字符串 字符串 {expr} 变为小写
toupper=>({expr}) 字符串 字符串 {expr} 变为大写
tr=>({src}, {fromstr}, {tostr}) 字符串 把 {src} 里的 {fromstr} 字符翻译为 {tostr} 字符
trunc=>({expr} 浮点 浮点数 {expr} 截断小数点
type=>({name}) 数值 变量 {name} 的类型
values=>({dict}) 列表 {dict} 的所有值
virtcol=>({expr}) 数值 光标或位置标记的屏幕列
visualmode=>([expr]) 字符串 最近使用的可视模式
winbufnr=>({nr}) 数值 窗口 {nr} 的缓冲区号
wincol=>() 数值 光标所在的窗口列
winheight=>({nr}) 数值 窗口 {nr} 的高度
winline=>() 数值 光标所在的窗口行
winnr=>([{expr}]) 数值 当前窗口的编号
winrestcmd=>() 字符串 返回恢复窗口大小的命令
winrestview=>({dict}) 无 恢复当前窗口的视图
winsaveview=>() 字典 保存当前窗口的视图
winwidth=>({nr}) 数值 窗口 {nr} 的宽度
writefile=>({list}, {fname} [, {binary}]) 数值 把行列表写到文件 {fname}
